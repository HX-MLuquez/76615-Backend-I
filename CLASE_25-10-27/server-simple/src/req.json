{
  _events: {
    close: undefined,
    error: undefined,
    data: undefined,
    end: undefined,
    readable: undefined
  },
  _readableState: ReadableState {
    highWaterMark: 16384,
    buffer: [],
    bufferIndex: 0,
    length: 0,
    pipes: [],
    awaitDrainWriters: null,
    Symbol(kState): 1315084
  },
  _maxListeners: undefined,
  socket: <ref *1> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _closeAfterHandlingError: false,
    _events: {
      close: [Array],
      error: [Function: socketOnError],
      prefinish: undefined,
      finish: undefined,
      drain: [Function: bound socketOnDrain],
      data: [Function: bound socketOnData],
      end: [Array],
      readable: undefined,
      timeout: [Function: socketOnTimeout],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _readableState: ReadableState {
      highWaterMark: 16384,
      buffer: [],
      bufferIndex: 0,
      length: 0,
      pipes: [],
      awaitDrainWriters: null,
      Symbol(kState): 193997060
    },
    _writableState: WritableState {
      highWaterMark: 16384,
      length: 0,
      corked: 0,
      onwrite: [Function: bound onwrite],
      writelen: 0,
      bufferedIndex: 0,
      pendingcb: 0,
      Symbol(kState): 17564420,
      Symbol(kBufferedValue): null
    },
    allowHalfOpen: true,
    _maxListeners: undefined,
    _eventsCount: 8,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      keepAliveTimeoutBuffer: 1000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _connections: 2,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      _listeningId: 2,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 16384,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::3000',
      Symbol(IncomingMessage): [Function: IncomingMessage],
      Symbol(ServerResponse): [Function: ServerResponse],
      Symbol(shapeMode): false,
      Symbol(kCapture): false,
      Symbol(async_id_symbol): 403,
      Symbol(kUniqueHeaders): null,
      Symbol(http.server.connections): ConnectionsList {},
      Symbol(http.server.connectionsCheckingInterval): Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 270,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        Symbol(refed): false,
        Symbol(kHasPrimitive): false,
        Symbol(asyncId): 405,
        Symbol(triggerId): 404,
        Symbol(kAsyncContextFrame): undefined
      }
    },
    _server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      keepAliveTimeoutBuffer: 1000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _connections: 2,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      _listeningId: 2,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 16384,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::3000',
      Symbol(IncomingMessage): [Function: IncomingMessage],
      Symbol(ServerResponse): [Function: ServerResponse],
      Symbol(shapeMode): false,
      Symbol(kCapture): false,
      Symbol(async_id_symbol): 403,
      Symbol(kUniqueHeaders): null,
      Symbol(http.server.connections): ConnectionsList {},
      Symbol(http.server.connectionsCheckingInterval): Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 270,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        Symbol(refed): false,
        Symbol(kHasPrimitive): false,
        Symbol(asyncId): 405,
        Symbol(triggerId): 404,
        Symbol(kAsyncContextFrame): undefined
      }
    },
    parser: HTTPParser {
      '0': null,
      '1': [Function: parserOnHeaders],
      '2': [Function: parserOnHeadersComplete],
      '3': [Function: parserOnBody],
      '4': [Function: parserOnMessageComplete],
      '5': [Function: bound onParserExecute],
      '6': [Function: bound onParserTimeout],
      _headers: [],
      _url: '',
      socket: [Circular *1],
      incoming: [Circular *2],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      joinDuplicateHeaders: null,
      Symbol(resource_symbol): [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    setEncoding: [Function: socketSetEncoding],
    _paused: false,
    _httpMessage: ServerResponse {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      _closed: false,
      _header: null,
      _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
      req: [Circular *2],
      _sent100: false,
      _expect_continue: false,
      _maxRequestsPerSocket: 0,
      locals: [Object: null prototype] {},
      Symbol(shapeMode): false,
      Symbol(kCapture): false,
      Symbol(kBytesWritten): 0,
      Symbol(kNeedDrain): false,
      Symbol(corked): 0,
      Symbol(kChunkedBuffer): [],
      Symbol(kChunkedLength): 0,
      Symbol(kSocket): [Circular *1],
      Symbol(kOutHeaders): [Object: null prototype],
      Symbol(errored): null,
      Symbol(kHighWaterMark): 16384,
      Symbol(kRejectNonStandardBodyWrites): false,
      Symbol(kUniqueHeaders): null
    },
    Symbol(async_id_symbol): 409,
    Symbol(kHandle): TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      Symbol(owner_symbol): [Circular *1]
    },
    Symbol(lastWriteQueueSize): 0,
    Symbol(timeout): null,
    Symbol(kBuffer): null,
    Symbol(kBufferCb): null,
    Symbol(kBufferGen): null,
    Symbol(shapeMode): true,
    Symbol(kCapture): false,
    Symbol(kSetNoDelay): true,
    Symbol(kSetKeepAlive): false,
    Symbol(kSetKeepAliveInitialDelay): 0,
    Symbol(kBytesRead): 0,
    Symbol(kBytesWritten): 0
  },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  rawHeaders: [
    'Host',
    'localhost:3000',
    'Connection',
    'keep-alive',
    'Cache-Control',
    'max-age=0',
    'sec-ch-ua',
    '"Google Chrome";v="141", "Not?A_Brand";v="8", "Chromium";v="141"',
    'sec-ch-ua-mobile',
    '?0',
    'sec-ch-ua-platform',
    '"Windows"',
    'Upgrade-Insecure-Requests',
    '1',
    'User-Agent',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36',
    'Accept',
    'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
    'Sec-Fetch-Site',
    'same-origin',
    'Sec-Fetch-Mode',
    'navigate',
    'Sec-Fetch-User',
    '?1',
    'Sec-Fetch-Dest',
    'document',
    'Referer',
    'http://localhost:3000/',
    'Accept-Encoding',
    'gzip, deflate, br, zstd',
    'Accept-Language',
    'es-ES,es;q=0.9,en;q=0.8',
    'Cookie',
    'rl_page_init_referrer=RudderEncrypt%3AU2FsdGVkX1%2FHLuH8x7%2Ff6oq%2BJJjf7wHLm6XLzzTDg2I%3D; rl_page_init_referring_domain=RudderEncrypt%3AU2FsdGVkX1%2BpVmdFvRSGPQn6%2BygF0H13OOQs1wNTO%2BU%3D; rl_anonymous_id=RudderEncrypt%3AU2FsdGVkX18r4orsXkSslmwubrT7sI86oaibLD4Dym4GhsfbJsw7fRbDGoDeqlFpECgcI2AV5htoyhDfCpJuSQ%3D%3D; rl_user_id=RudderEncrypt%3AU2FsdGVkX19nLbFLK7x6TIiNS%2Bne%2Bmt1HQhBQyl8qgmAA0uMpC97fhiinNs9AJkUa4jnmI%2BGTJufSegeEDvpyDIHfhRD%2FZAJwovb%2FFPAwRmDi6cCULTKz4bgdjD8V53uwMp2C0YPzp8PnMoEE0FNTBnayUIzILK8ChggZ0AuMHA%3D; rl_trait=RudderEncrypt%3AU2FsdGVkX1%2BdW2QSjuvTx6CG9yz37cy36rdm5Ipt3Zfjf%2FoYixRBF8H9CkNm%2BRbYNwvJQaSf%2BbQ2Xf4IbiZcMnyz106BxlYYstvwCz0bG8CQ8fgfZfbSB1mmmyxBj%2FxfBFFnrfDGlrKVkcXTTUreiQ%3D%3D; rl_session=RudderEncrypt%3AU2FsdGVkX1%2Bb%2F910T9eN9XhBtdmv41cuBjuaGrZuX1kgWl5eAnalK%2BobP6JIqcgsGkr6%2BJSrrklNwY4oH0dApvEAJ%2F%2BHvlvUXdkgfogxrt1u8R%2F9ZyiRU6POgMQpZDnzCj2og%2FCNpu3fRcggBSifFA%3D%3D; ph_phc_4URIAm1uYfJO7j8kWSe0J8lc8IqnstRLS7Jx8NcakHo_posthog=%7B%22distinct_id%22%3A%22c1c1886b70356e7c2a0ebac13224b235835513779005b8a6306957da9b2f910f%233bb42522-22ac-4ad8-a332-6073a5e98253%22%2C%22%24sesid%22%3A%5B1756073587599%2C%220198de24-7391-79d7-83e1-09d910989e04%22%2C1756073587599%5D%2C%22%24epp%22%3Atrue%2C%22%24initial_person_info%22%3A%7B%22r%22%3A%22%24direct%22%2C%22u%22%3A%22http%3A%2F%2Flocalhost%3A5678%2Fsetup%22%7D%7D',
    'If-None-Match',
    'W/"7f-ZxnCpQMuz3Y/lTOgxuMKtkevBJ0"'
  ],
  rawTrailers: [],
  joinDuplicateHeaders: null,
  aborted: false,
  upgrade: false,
  url: '/api/bicicletas',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client: <ref *1> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _closeAfterHandlingError: false,
    _events: {
      close: [Array],
      error: [Function: socketOnError],
      prefinish: undefined,
      finish: undefined,
      drain: [Function: bound socketOnDrain],
      data: [Function: bound socketOnData],
      end: [Array],
      readable: undefined,
      timeout: [Function: socketOnTimeout],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _readableState: ReadableState {
      highWaterMark: 16384,
      buffer: [],
      bufferIndex: 0,
      length: 0,
      pipes: [],
      awaitDrainWriters: null,
      Symbol(kState): 193997060
    },
    _writableState: WritableState {
      highWaterMark: 16384,
      length: 0,
      corked: 0,
      onwrite: [Function: bound onwrite],
      writelen: 0,
      bufferedIndex: 0,
      pendingcb: 0,
      Symbol(kState): 17564420,
      Symbol(kBufferedValue): null
    },
    allowHalfOpen: true,
    _maxListeners: undefined,
    _eventsCount: 8,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      keepAliveTimeoutBuffer: 1000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _connections: 2,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      _listeningId: 2,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 16384,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::3000',
      Symbol(IncomingMessage): [Function: IncomingMessage],
      Symbol(ServerResponse): [Function: ServerResponse],
      Symbol(shapeMode): false,
      Symbol(kCapture): false,
      Symbol(async_id_symbol): 403,
      Symbol(kUniqueHeaders): null,
      Symbol(http.server.connections): ConnectionsList {},
      Symbol(http.server.connectionsCheckingInterval): Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 270,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        Symbol(refed): false,
        Symbol(kHasPrimitive): false,
        Symbol(asyncId): 405,
        Symbol(triggerId): 404,
        Symbol(kAsyncContextFrame): undefined
      }
    },
    _server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      keepAliveTimeoutBuffer: 1000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _connections: 2,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      _listeningId: 2,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 16384,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::3000',
      Symbol(IncomingMessage): [Function: IncomingMessage],
      Symbol(ServerResponse): [Function: ServerResponse],
      Symbol(shapeMode): false,
      Symbol(kCapture): false,
      Symbol(async_id_symbol): 403,
      Symbol(kUniqueHeaders): null,
      Symbol(http.server.connections): ConnectionsList {},
      Symbol(http.server.connectionsCheckingInterval): Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 270,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        Symbol(refed): false,
        Symbol(kHasPrimitive): false,
        Symbol(asyncId): 405,
        Symbol(triggerId): 404,
        Symbol(kAsyncContextFrame): undefined
      }
    },
    parser: HTTPParser {
      '0': null,
      '1': [Function: parserOnHeaders],
      '2': [Function: parserOnHeadersComplete],
      '3': [Function: parserOnBody],
      '4': [Function: parserOnMessageComplete],
      '5': [Function: bound onParserExecute],
      '6': [Function: bound onParserTimeout],
      _headers: [],
      _url: '',
      socket: [Circular *1],
      incoming: [Circular *2],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      joinDuplicateHeaders: null,
      Symbol(resource_symbol): [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    setEncoding: [Function: socketSetEncoding],
    _paused: false,
    _httpMessage: ServerResponse {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      _closed: false,
      _header: null,
      _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
      req: [Circular *2],
      _sent100: false,
      _expect_continue: false,
      _maxRequestsPerSocket: 0,
      locals: [Object: null prototype] {},
      Symbol(shapeMode): false,
      Symbol(kCapture): false,
      Symbol(kBytesWritten): 0,
      Symbol(kNeedDrain): false,
      Symbol(corked): 0,
      Symbol(kChunkedBuffer): [],
      Symbol(kChunkedLength): 0,
      Symbol(kSocket): [Circular *1],
      Symbol(kOutHeaders): [Object: null prototype],
      Symbol(errored): null,
      Symbol(kHighWaterMark): 16384,
      Symbol(kRejectNonStandardBodyWrites): false,
      Symbol(kUniqueHeaders): null
    },
    Symbol(async_id_symbol): 409,
    Symbol(kHandle): TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      Symbol(owner_symbol): [Circular *1]
    },
    Symbol(lastWriteQueueSize): 0,
    Symbol(timeout): null,
    Symbol(kBuffer): null,
    Symbol(kBufferCb): null,
    Symbol(kBufferGen): null,
    Symbol(shapeMode): true,
    Symbol(kCapture): false,
    Symbol(kSetNoDelay): true,
    Symbol(kSetKeepAlive): false,
    Symbol(kSetKeepAliveInitialDelay): 0,
    Symbol(kBytesRead): 0,
    Symbol(kBytesWritten): 0
  },
  _consuming: false,
  _dumped: false,
  res: <ref *3> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: false,
    _headerSent: false,
    _closed: false,
    _header: null,
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    req: [Circular *2],
    _sent100: false,
    _expect_continue: false,
    _maxRequestsPerSocket: 0,
    locals: [Object: null prototype] {},
    Symbol(shapeMode): false,
    Symbol(kCapture): false,
    Symbol(kBytesWritten): 0,
    Symbol(kNeedDrain): false,
    Symbol(corked): 0,
    Symbol(kChunkedBuffer): [],
    Symbol(kChunkedLength): 0,
    Symbol(kSocket): <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: true,
      _maxListeners: undefined,
      _eventsCount: 8,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _httpMessage: [Circular *3],
      Symbol(async_id_symbol): 409,
      Symbol(kHandle): [TCP],
      Symbol(lastWriteQueueSize): 0,
      Symbol(timeout): null,
      Symbol(kBuffer): null,
      Symbol(kBufferCb): null,
      Symbol(kBufferGen): null,
      Symbol(shapeMode): true,
      Symbol(kCapture): false,
      Symbol(kSetNoDelay): true,
      Symbol(kSetKeepAlive): false,
      Symbol(kSetKeepAliveInitialDelay): 0,
      Symbol(kBytesRead): 0,
      Symbol(kBytesWritten): 0
    },
    Symbol(kOutHeaders): [Object: null prototype] { 'x-powered-by': [Array] },
    Symbol(errored): null,
    Symbol(kHighWaterMark): 16384,
    Symbol(kRejectNonStandardBodyWrites): false,
    Symbol(kUniqueHeaders): null
  },
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/api/bicicletas',
  _parsedUrl: Url {
    protocol: null,
    slashes: null,
    auth: null,
    host: null,
    port: null,
    hostname: null,
    hash: null,
    search: null,
    query: null,
    pathname: '/api/bicicletas',
    path: '/api/bicicletas',
    href: '/api/bicicletas',
    _raw: '/api/bicicletas'
  },
  route: Route {
    path: '/api/bicicletas',
    stack: [ [Layer] ],
    methods: [Object: null prototype] { get: true }
  },
  params: [Object: null prototype] {},
  Symbol(shapeMode): true,
  Symbol(kCapture): false,
  Symbol(kHeaders): {
    host: 'localhost:3000',
    connection: 'keep-alive',
    'cache-control': 'max-age=0',
    'sec-ch-ua': '"Google Chrome";v="141", "Not?A_Brand";v="8", "Chromium";v="141"',
    'sec-ch-ua-mobile': '?0',
    'sec-ch-ua-platform': '"Windows"',
    'upgrade-insecure-requests': '1',
    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36',
    accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
    'sec-fetch-site': 'same-origin',
    'sec-fetch-mode': 'navigate',
    'sec-fetch-user': '?1',
    'sec-fetch-dest': 'document',
    referer: 'http://localhost:3000/',
    'accept-encoding': 'gzip, deflate, br, zstd',
    'accept-language': 'es-ES,es;q=0.9,en;q=0.8',
    cookie: 'rl_page_init_referrer=RudderEncrypt%3AU2FsdGVkX1%2FHLuH8x7%2Ff6oq%2BJJjf7wHLm6XLzzTDg2I%3D; rl_page_init_referring_domain=RudderEncrypt%3AU2FsdGVkX1%2BpVmdFvRSGPQn6%2BygF0H13OOQs1wNTO%2BU%3D; rl_anonymous_id=RudderEncrypt%3AU2FsdGVkX18r4orsXkSslmwubrT7sI86oaibLD4Dym4GhsfbJsw7fRbDGoDeqlFpECgcI2AV5htoyhDfCpJuSQ%3D%3D; rl_user_id=RudderEncrypt%3AU2FsdGVkX19nLbFLK7x6TIiNS%2Bne%2Bmt1HQhBQyl8qgmAA0uMpC97fhiinNs9AJkUa4jnmI%2BGTJufSegeEDvpyDIHfhRD%2FZAJwovb%2FFPAwRmDi6cCULTKz4bgdjD8V53uwMp2C0YPzp8PnMoEE0FNTBnayUIzILK8ChggZ0AuMHA%3D; rl_trait=RudderEncrypt%3AU2FsdGVkX1%2BdW2QSjuvTx6CG9yz37cy36rdm5Ipt3Zfjf%2FoYixRBF8H9CkNm%2BRbYNwvJQaSf%2BbQ2Xf4IbiZcMnyz106BxlYYstvwCz0bG8CQ8fgfZfbSB1mmmyxBj%2FxfBFFnrfDGlrKVkcXTTUreiQ%3D%3D; rl_session=RudderEncrypt%3AU2FsdGVkX1%2Bb%2F910T9eN9XhBtdmv41cuBjuaGrZuX1kgWl5eAnalK%2BobP6JIqcgsGkr6%2BJSrrklNwY4oH0dApvEAJ%2F%2BHvlvUXdkgfogxrt1u8R%2F9ZyiRU6POgMQpZDnzCj2og%2FCNpu3fRcggBSifFA%3D%3D; ph_phc_4URIAm1uYfJO7j8kWSe0J8lc8IqnstRLS7Jx8NcakHo_posthog=%7B%22distinct_id%22%3A%22c1c1886b70356e7c2a0ebac13224b235835513779005b8a6306957da9b2f910f%233bb42522-22ac-4ad8-a332-6073a5e98253%22%2C%22%24sesid%22%3A%5B1756073587599%2C%220198de24-7391-79d7-83e1-09d910989e04%22%2C1756073587599%5D%2C%22%24epp%22%3Atrue%2C%22%24initial_person_info%22%3A%7B%22r%22%3A%22%24direct%22%2C%22u%22%3A%22http%3A%2F%2Flocalhost%3A5678%2Fsetup%22%7D%7D',
    'if-none-match': 'W/"7f-ZxnCpQMuz3Y/lTOgxuMKtkevBJ0"'
  },
  Symbol(kHeadersCount): 36,
  Symbol(kTrailers): null,
  Symbol(kTrailersCount): 0
}